import { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/router';
import ChatPanel from '../components/ChatPanel';
import { listProjects, Project, getProjectContext, ProjectContext, generateDocuments, aiGenerateDocuments } from '../lib/api';
import NextAction from '../components/ui/NextAction';

export default function ChatPage() {
  const router = useRouter();
  const [projects, setProjects] = useState<Project[]>([]);
  const [selected, setSelected] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [ctx, setCtx] = useState<ProjectContext | null>(null);

  const selectedProject = useMemo(() => projects.find(p => p.project_id === selected) || null, [projects, selected]);

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        setError(null);
        const list = await listProjects();
        setProjects(list);
        if (list.length) setSelected(list[0].project_id);
      } catch (e: any) {
        setError(e?.message || String(e));
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  useEffect(() => {
    if (!selected) return;
    (async () => {
      try {
        setError(null);
        const c = await getProjectContext(selected);
        setCtx(c);
      } catch {}
    })();
  }, [selected]);

  async function onRegenerateFromChat() {
    if (!selected) return;
    try {
      setLoading(true);
      setError(null);
      await generateDocuments(selected, { traceability_overlay: true });
      // Take the user to the project workspace Docs tab to view results
      await router.push(`/projects/${encodeURIComponent(selected)}?tab=Docs`);
    } catch (e: any) {
      setError(e?.message || String(e));
    } finally {
      setLoading(false);
    }
  }

  function buildPromptFromContext(c: ProjectContext | null): string {
    const data: any = c?.data || {};
    const planning = data?.summaries?.Planning || '';
    const reqs: string[] = Array.isArray(data?.answers?.Requirements) ? data.answers.Requirements : [];
    const parts = [
      planning ? `Planning Summary:\n${planning}` : '',
      reqs.length ? `Requirements:\n- ${reqs.join('\n- ')}` : '',
    ].filter(Boolean);
    if (parts.length) return parts.join('\n\n');
    return 'Generate the standard documents (Project Charter, SRS, SDD, Test Plan) for this project based on current context.';
  }

  async function onAIGenerateFromChat() {
    if (!selected) return;
    try {
      setLoading(true);
      setError(null);
      const latest = await getProjectContext(selected);
      const prompt = buildPromptFromContext(latest);
      await aiGenerateDocuments(selected, { input_text: prompt });
      await router.push(`/projects/${encodeURIComponent(selected)}?tab=Docs`);
    } catch (e: any) {
      setError(e?.message || String(e));
    } finally {
      setLoading(false);
    }
  }

  return (
    <div>
      <h2>Chat</h2>
      {error && <p className="error">{error}</p>}

      {selectedProject && (
        <NextAction
          message={"Capture or refine requirements here, then continue in the Project Workspace to apply them and generate documents."}
          primary={{ label: 'Open Workspace', href: `/projects/${selectedProject.project_id}?tab=Requirements`, variant: 'primary' }}
          secondary={[{ label: 'Open Docs', href: `/projects/${selectedProject.project_id}?tab=Docs` }]}
        />
      )}

      <div className="card" style={{ marginBottom: 12 }}>
        <label style={{ display: 'grid', gap: 6 }}>
          <span>Project</span>
          <select className="select" aria-label="Select project" value={selected} onChange={e => setSelected(e.target.value)}>
            {projects.map(p => (
              <option key={p.project_id} value={p.project_id}>{p.name} ({p.project_id})</option>
            ))}
          </select>
        </label>
      </div>

      {selectedProject ? (
        <div className="columns-23">
          <div className="card">
            <ChatPanel projectId={selectedProject.project_id} onAIGenerateRequested={onAIGenerateFromChat} onRegenerateRequested={onRegenerateFromChat} autoGenerateDefault={true} />
          </div>
          <div className="card">
            <div className="section-title">Context</div>
            {!ctx && <div className="muted">No stored context.</div>}
            {ctx && (
              <div style={{ display: 'grid', gap: 8 }}>
                <div>
                  <strong>Summaries</strong>
                  <pre style={{ whiteSpace: 'pre-wrap' }}>{JSON.stringify(ctx.data?.summaries || {}, null, 2)}</pre>
                </div>
                <div>
                  <strong>Answers</strong>
                  <pre style={{ whiteSpace: 'pre-wrap' }}>{JSON.stringify(ctx.data?.answers || {}, null, 2)}</pre>
                </div>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div className="card"><div className="muted">No project selected.</div></div>
      )}
    </div>
  );
}
